let s:assert = themis#helper('assert')
call themis#helper('command').with(s:assert)

describe shrinkmap#canvas
  describe #init()
    before each
      let l:canvas = shrinkmap#canvas#init()
    end

    it should return empty list
      Assert Equals(l:canvas, [])
    end
  end

  describe #allocate()
    before each
      let l:canvas = shrinkmap#canvas#init()
    end

    context when X = 0..1
      it should allocate a braille character
        let l:expected = [ [ 0x2800 ] ]

        call shrinkmap#canvas#allocate(l:canvas, 0, 0)
        Assert Equals(l:canvas, l:expected)

        call shrinkmap#canvas#allocate(l:canvas, 0, 1)
        Assert Equals(l:canvas, l:expected)
      end
    end

    context when X = 2
      it should allocate two braille characters
        let l:expected = [ [ 0x2800, 0x2800 ] ]
        call shrinkmap#canvas#allocate(l:canvas, 0, 2)
        Assert Equals(l:canvas, l:expected)
      end
    end

    context when Y = 0..3
      it should allocate the first line
        let l:expected = [
          \ [ 0x2800 ],
        \]

        call shrinkmap#canvas#allocate(l:canvas, 0, 0)
        Assert Equals(l:canvas, l:expected)

        call shrinkmap#canvas#allocate(l:canvas, 1, 0)
        Assert Equals(l:canvas, l:expected)

        call shrinkmap#canvas#allocate(l:canvas, 2, 0)
        Assert Equals(l:canvas, l:expected)

        call shrinkmap#canvas#allocate(l:canvas, 3, 0)
        Assert Equals(l:canvas, l:expected)
      end
    end

    context when Y = 4
      it should allocate the second line
        let l:expected = [
          \ [],
          \ [ 0x2800 ],
        \]
        call shrinkmap#canvas#allocate(l:canvas, 4, 0)
        Assert Equals(l:canvas, l:expected)
      end
    end
  end

  describe #draw_line()
    before all
      let l:canvas = shrinkmap#canvas#init()
    end

    it can draw 1 dot in line 0
      let expected = [ [ 0x2801 ] ]
      call shrinkmap#canvas#allocate(l:canvas, 0, 0)
      call shrinkmap#canvas#draw_line(l:canvas, 0, 0, 0)
      Assert Equals(l:canvas, l:expected)
    end

    it can draw 3 dots in line 1
      let expected = [ [ 0x2811, 0x2812 ] ]
      call shrinkmap#canvas#allocate(l:canvas, 1, 3)
      call shrinkmap#canvas#draw_line(l:canvas, 1, 1, 3)
      Assert Equals(l:canvas, l:expected)
    end

    it can draw 5 dots in line 2
      let expected = [ [ 0x2811, 0x2836, 0x2824, 0x2804 ] ]
      call shrinkmap#canvas#allocate(l:canvas, 2, 6)
      call shrinkmap#canvas#draw_line(l:canvas, 2, 2, 6)
      Assert Equals(l:canvas, l:expected)
    end

    it can draw 7 dots in line 3
      let expected = [ [ 0x2811, 0x28b6, 0x28e4, 0x28c4, 0x28c0 ] ]
      call shrinkmap#canvas#allocate(l:canvas, 3, 9)
      call shrinkmap#canvas#draw_line(l:canvas, 3, 3, 9)
      Assert Equals(l:canvas, l:expected)
    end

    it can draw 9 dots in line 4
      let expected = [
        \ [ 0x2811, 0x28b6, 0x28e4, 0x28c4, 0x28c0 ],
        \ [ 0x2800, 0x2800, 0x2809, 0x2809, 0x2809, 0x2809, 0x2801 ],
      \]
      call shrinkmap#canvas#allocate(l:canvas, 4, 12)
      call shrinkmap#canvas#draw_line(l:canvas, 4, 4, 12)
      Assert Equals(l:canvas, l:expected)
    end
  end
end
